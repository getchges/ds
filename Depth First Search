//Depth First Search
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct Node {
    int data;
    struct Node* next;
} Node;

typedef struct Graph {
    int numVertices;
    Node* adjacencyList[MAX_VERTICES];
    int visitState[MAX_VERTICES];
} Graph;

enum VisitState { UNVISITED, VISITING, VISITED };

Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;

    for (int i = 0; i < vertices; i++) {
        graph->adjacencyList[i] = NULL;
        graph->visitState[i] = UNVISITED;
    }

    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = dest;
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;
}

int DFS(Graph* graph, int vertex) {
    if (graph->visitState[vertex] == VISITED) {
        return 0; // Already visited
    }

    if (graph->visitState[vertex] == VISITING) {
        return 1; // Found a cycle
    }

    printf("Visited: %d\n", vertex);
    graph->visitState[vertex] = VISITING;

    Node* currentNode = graph->adjacencyList[vertex];
    while (currentNode != NULL) {
        int adjVertex = currentNode->data;
        if (DFS(graph, adjVertex) == 1) {
            return 1; // Cycle found in the subtree
        }
        currentNode = currentNode->next;
    }

    graph->visitState[vertex] = VISITED;
    return 0;
}

int main() {
    int numVertices, numEdges;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    Graph* graph = createGraph(numVertices);

    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    printf("Enter the edges (source destination):\n");
    for (int i = 0; i < numEdges; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    int startVertex;
    printf("Enter the starting vertex for DFS: ");
    scanf("%d", &startVertex);

    printf("Depth-First Search starting from vertex %d:\n", startVertex);
    int hasCycle = DFS(graph, startVertex);

    if (hasCycle) {
        printf("The graph contains a cycle.\n");
    } else {
        printf("The graph does not contain a cycle.\n");
    }

    return 0;
}
